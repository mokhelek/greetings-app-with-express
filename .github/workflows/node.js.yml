# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

# name: Node.js CI

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         node-version: [16.x, 18.x]
#         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

#     steps:
#     - uses: actions/checkout@v3
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'
#     - run: npm ci
#     - run: npm run build --if-present
#     - run: npm test








# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: NodeJS CI with PostgreSQL - now

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x,]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    services:
      postgres:
        image: postgres:latest
        env: 
          DATABASE_HOST: dpg-cj1p1d6nqqla1dibjvs0-a.oregon-postgres.render.com
          DATABASE_PASSWORD: TvueAuamk9ZUOc7UjzSUIoTbzAENDNiF
        ports:
        - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: npm install
    # - name: create postgresql tables
      # run: PGPASSWORD=coder123 psql -h localhost -U coder -d my_products -a -f ./tables.sql
    - name: run tests with postgresql
      run:
        npm test
      env:
        DATABASE_HOST: dpg-cj1p1d6nqqla1dibjvs0-a.oregon-postgres.render.com
        DATABASE_PASSWORD: TvueAuamk9ZUOc7UjzSUIoTbzAENDNiF